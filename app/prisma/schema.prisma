generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model WineClub {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  image       String
  clubOwner   User      @relation(name: "clubOwner", fields: [clubOwnerId], references: [id])
  clubOwnerId String
  members     User[]    @relation(name: "clubMembers")
  createdAt   DateTime  @default(now())
  events      Event[]
  tastings    Tasting[]
}

model Event {
  id          String    @id @default(uuid())
  description String    @default("")
  tastings    Tasting[]
  signUps     User[]    @relation(name: "signUps")
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  wineClub    WineClub  @relation(fields: [wineClubId], references: [id])
  wineClubId  String
  host        User      @relation(name: "eventHost", fields: [hostId], references: [id])
  hostId      String
  location    String
}

model Tasting {
  id         String    @id @default(uuid())
  wine       Wine      @relation(fields: [wineId], references: [id])
  wineId     String
  event      Event     @relation(fields: [eventId], references: [id])
  eventId    String
  ratings    Rating[]
  WineClub   WineClub @relation(fields: [wineClubId], references: [id])
  wineClubId String
}

model Wine {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String
  createdAt DateTime  @default(now())
  year      DateTime  @default(now())
  Tasting   Tasting[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  wineId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  Tasting   Tasting  @relation(fields: [tastingId], references: [id])
  tastingId String
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  password       String
  role           Role       @default(MEMBER)
  WineClubs      WineClub[] @relation("clubMembers")
  OwnedWineClubs WineClub[] @relation("clubOwner")
  ratings        Rating[]
  events         Event[]    @relation("signUps")
  hostEvents     Event[]    @relation("eventHost")
}

enum Role {
  MEMBER
  ADMIN
}
